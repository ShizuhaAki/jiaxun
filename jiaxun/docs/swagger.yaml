basePath: /api
definitions:
  model.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      fullName:
        type: string
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@jiaxun.example.com
    name: API Support
    url: http://www.jiaxun.example.com/support
  description: This is the REST API for the Jiaxun application
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Jiaxun API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      operationId: Login
      parameters:
      - description: Login credentials
        in: body
        name: body
        required: true
        schema:
          properties:
            password:
              type: string
            username:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            properties:
              token:
                type: string
              user:
                properties:
                  email:
                    type: string
                  fullName:
                    type: string
                  id:
                    type: integer
                  role:
                    type: string
                  username:
                    type: string
                type: object
            type: object
        "400":
          description: Invalid input
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Invalid credentials
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: User login
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of users (teachers only)
      operationId: ListUsers
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Page size (default: 10, max: 100)'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            type: array
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Forbidden
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a new user account (admin only)
      operationId: Register
      parameters:
      - description: User information
        in: body
        name: body
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created user
          schema:
            properties:
              user:
                $ref: '#/definitions/model.User'
            type: object
        "400":
          description: Invalid input
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Forbidden
          schema:
            properties:
              error:
                type: string
            type: object
        "409":
          description: User already exists
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Register a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Removes a user account
      operationId: DeleteUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid user ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Forbidden
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieves a user's profile by their ID
      operationId: GetUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            properties:
              user:
                $ref: '#/definitions/model.User'
            type: object
        "400":
          description: Invalid user ID
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates a user's profile information
      operationId: UpdateUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fields to update
        in: body
        name: body
        schema:
          properties:
            email:
              type: string
            full_name:
              type: string
            password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Updated user
          schema:
            properties:
              user:
                $ref: '#/definitions/model.User'
            type: object
        "400":
          description: Invalid input
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Forbidden
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Update user
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Retrieves the profile of the currently authenticated user
      operationId: GetCurrentUser
      produces:
      - application/json
      responses:
        "200":
          description: Current user
          schema:
            properties:
              user:
                $ref: '#/definitions/model.User'
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get current user
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
